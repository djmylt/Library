#!/usr/bin/env python

import itertools
import numpy
import matplotlib.pyplot as plot

sizes = [5000, 10000, 15000, 20000, 25000, 30000, 35000, 40000, 45000, 50000,
        55000, 60000, 65000, 70000, 75000, 80000, 85000, 90000, 95000, 100000]

results = {'segment_tree' : {'time' : [], 'size' : [], 'data' : []}, 'sparse_table' : {'time' : [], 'size' : [], 'data' : []}}

for (structure, size) in itertools.product(results.keys(), sizes):
    with open(structure + "_" + str(size)) as data_file:
        time = []
        size = []
        data = []
        for line in data_file:
            clauses = line.split(",")
            time.append(float(clauses[0]))
            size.append(int(clauses[1]))
            data.append(int(clauses[2]))
        results[structure]['time'].append(numpy.mean(time))
        results[structure]['size'].append(numpy.mean(size))
        results[structure]['data'].append(numpy.mean(data))

plot.figure()
plot.plot(sizes, results['segment_tree']['time'], 'r', label='Segment Tree')
plot.plot(sizes, results['sparse_table']['time'], 'b', label='Sparse Table')
plot.xlabel('Size of Lists')
plot.ylabel('Total Time (ms)')
plot.title('Time Taken to Process Queries over Size')
plot.legend()
plot.figure()
plot.plot(sizes, results['segment_tree']['size'], 'r', label='Segment Tree')
plot.plot(sizes, results['sparse_table']['size'], 'b', label='Sparse Table')
plot.xlabel('Size of Lists')
plot.ylabel('Total Space (4kB Pages)')
plot.title('Space Taken to Process Queries over Size')
plot.legend()
plot.figure()
plot.plot(sizes, results['segment_tree']['data'], 'r', label='Segment Tree')
plot.plot(sizes, results['sparse_table']['data'], 'b', label='Sparse Table')
plot.xlabel('Size of Lists')
plot.ylabel('Data/Stack Size (4kB Pages)')
plot.title('Data/Stack Space Taken to Process Queries over Size')
plot.legend()
plot.show()
